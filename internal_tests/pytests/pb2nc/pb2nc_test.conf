[exe]
## NON-MET executables
WGRIB2 = /usr/local/bin/wgrib2
RM_EXE = /bin/rm
CUT_EXE = /usr/bin/cut
TR_EXE = /usr/bin/tr
NCAP2_EXE =/usr/local/nco/bin/ncap2
CONVERT_EXE =/usr/bin/convert
NCDUMP_EXE = /usr/local/bin/ncdump
EGREP_EXE = /bin/egrep

[dir]
## Input data directories
## This is the location of your input files for METplus

PROJ_DIR = /path/to
TMP_DIR = /path/to
OUTPUT_BASE = /path/to
METPLUS_BASE = /path/to
MET_BUILD_BASE = /usr/local/met-8.0/share/met
MET_INSTALL_DIR = /usr/local/met-8.0
#TRACK_DATA_DIR = {METPLUS_BASE}/sample_data/GFS/track_data
## track data, set to your data source
TRACK_DATA_DIR = /d1/SBU/GFS/track_data
TRACK_DATA_SUBDIR_MOD = {PROJ_DIR}/track_data_atcf
TC_PAIRS_DIR = {OUTPUT_BASE}/tc_pairs
MODEL_DATA_DIR = /d1/SBU/GFS/model_data
PARM_BASE = /home/minnawin/dec4/METplus/parm

## Used with OUTPUT_BASE to create the output directory from PB2NC
PREPBUFR_DATA_DIR = /d1/METplus_Mallory/data/prepbufr

# this is the name of model (and subdir to PREPBUFR_DATA_DIR)
# ex: nam for NAM or gdas for GDAS dir
PREPBUFR_MODEL_DIR_NAME = gdas
#PREPBUFR_MODEL_DIR_NAME = nam
PB2NC_OUTPUT_DIR = {OUTPUT_BASE}/{PREPBUFR_MODEL_DIR_NAME}/{VERTICAL_LOCATION}


[config]
# Logging levels: DEBUG, INFO, WARN, ERROR (most verbose is DEBUG)
LOG_LEVEL = DEBUG

#
## Configuration-related settings such as the process list, begin and end times, etc.
PROCESS_LIST = PB2NC
## Param file used by MET
PB2NC_CONFIG_FILE = {PARM_BASE}/met_config/PB2NCConfig_upper_air
#PB2NC_CONFIG_FILE = {PARM_BASE}/met_config/PB2NCConfig_conus_sfc

## The location of the grid-to-obs data, either upper_air or conus_sfc
VERTICAL_LOCATION = upper_air
#VERTICAL_LOCATION = conus_sfc
GRID_MASK =
MASK_POLY =
STATION_ID =
QUALITY_MARK_THRESH =
# Leave empty to retain all message types
MESSAGE_TYPE =

# If you want to change the values in OBS_BUFR_VAR_LIST: 1) keep the number the same or 2) change the
# corresponding pytest test, test_get_obs_bufr_var_list's parametrize to reflect the change.

# Leave empty to process all
OBS_BUFR_VAR_LIST = PMO, TOB, TDO, UOB, VOB, PWO, TOCC

## Begin and end times of the prepBUFR data to be converted to netCDF
##

# Time method by which to perform validation, either by init time or by valid
# time.

# Indicate which method, by init or by valid time
TIME_METHOD = BY_INIT ;; or BY_VALID

# For processing by init time or valid time, indicate the start and end hours
# in HH format
START_HOUR = 00
END_HOUR = 23

# Indicate the begin and end date
BEG_TIME = 20170601
END_TIME = 20170605
INTERVAL_TIME = 24

# start and end dates are created by combining the date with
# start and end hours (format can be hh, hhmm, or hhmmss.
START_DATE = {BEG_TIME}{START_HOUR}
END_DATE = {END_TIME}{END_HOUR}

## For defining the time periods for summarization
# start time of time summary in HHMMSS format
TIME_SUMMARY_BEG = 000000
# end time of time summary in HHMMSS format
TIME_SUMMARY_END = 235959
#  a list of the variables to summarize
TIME_SUMMARY_VAR_NAMES = QOB, TOB
# a list of the statistics to summarize
TIME_SUMMARY_TYPES = min, max, range, mean, stdev, median, p80

## OVERWRITE OPTIONS
## Don't overwrite files if they already exist.
## Set to no if you do NOT want to override existing files
## Set to yes if you do want to override existing files
OVERWRITE_NC_OUTPUT = yes

#
##  FILENAME TEMPLATES
#
[filename_templates]
## Output file template
# For NAM
#NC_FILE_TMPL = prepbufr.nam.{init?fmt=%Y%m%d}.t{cycle?fmt=%HH}z.tm{offset?fmt=%HH}.nc
# For GDAS
NC_FILE_TMPL = prepbufr.gdas.{valid?fmt=%Y%m%d%H}.nc


#
## REGEX PATTERN
#
[regex_pattern]
## Define prepBUFR input directory and filename patterns, place parenthesis
## around any YMD, cycle time, and offset (fhr)
#NAM_PREPBUFR_DIR_REGEX = .*nam.(2[0-9]{7})
#NAM_PREPBUFR_FILE_REGEX = nam.t([0-9]{2})z.prepbufr.tm([0-9]{2})
GDAS_PREPBUFR_FILE_REGEX = .*prepbufr.gdas.(2[0-9]{9})

#PREPBUFR_DIR_REGEX = .*nam.(2[0-9]{7})
#PREPBUFR_FILE_REGEX = .*nam.t([0-9]{2})z.prepbufr.tm([0-9]{2})
# or substitute via pre-defined KEY
#PREPBUFR_FILE_REGEX = {NAM_PREPBUFR_FILE_REGEX}

## For GDAS
PREPBUFR_DIR_REGEX =
PREPBUFR_FILE_REGEX = .*prepbufr.gdas.(2[0-9]{9})
## or define via pre-defined KEY, GDAS_PREPBUFR_FILE_REGEX
# PREPBUFR_FILE_REGEX = {GDAS_PREPBUFR_FILE_REGEX}

