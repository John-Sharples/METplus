#  PB2NC
#  This file is meant to run MET pb2nc for the HRRRE use case. 

# Define prepBUFR input directory and filename patterns, place parenthesis
# around any (YMD), cycle time

# =============================================================================
#
##  DIR section
#
[dir]
# PREEPBUFR_DATA_DIR:
# PREPBUFR_DATA_DIR/PREPBUFR_MODEL_DIR_NAME is combined and used as the
# base_search_dir, using PREPBUFR_DIR_REGEX, to search and generate a list of 
# all the YYYYMMDD subdirectories of the prebbufr data files. 
# Do NOT use symbolic links under the base_search_dir to point to directories, 
# they will not be searched.

PREPBUFR_DATA_DIR = {INPUT_BASE}/prepbufr
# ex: nam, gdas, rap
PREPBUFR_MODEL_DIR_NAME = rap

# PB2NC_OUTPUT_DIR:
# Where the pb2nc netcdf output files are written.
# These are the input netcdf files to ensemble_stat

PB2NC_OUTPUT_DIR = {OUTPUT_BASE}/rap
#OBS_ENSEMBLE_STAT_INPUT_DIR = {PB2NC_OUTPUT_DIR}

# =============================================================================
#
## REGEX PATTERN section
#
[regex_pattern]

# PREPBUFR_DIR_REGEX: Must include CycleTime group parenthesis pattern.
# ie. (<pattern>)
# YOUR prepbufr files MUST reside in YYYYMMDD subdirectories and a CycleTime
# pattern grouping, ie. (2[0-9]{7}), MUST exist in your pattern definition below.
# THIS pattern is meant to match PREPBUFR_DATA_DIR/PREPBUFR_MODEL_DIR_NAME/YYYYMMDD
# ie. PREPBUFR_DIR_REGEX = .*\/rap\/(2[0-9]{7}).*

PREPBUFR_DIR_REGEX = .*\/rap\/(2[0-9]{7}).*

# PREPBUFR_FILE_REGEXE:
# This is used for the files to search for in the PREPBUFR_DIR_REGEX subdirectories,
# any pattern grouping is currently NOT being used for file time determination.
# cycle=t(<pattern>)z, offset=tm(<pattern>)
#PREPBUFR_FILE_REGEX = .*rap.t([0-9]{2})z.prepbufr.tm([0-9]{2}).*

PREPBUFR_FILE_REGEX = .*


# =============================================================================
#
##  FILENAME TEMPLATES section
#
[filename_templates]

# This is your filename template for naming the prepbufr output files.
# Supported Keywords: init, cycle, offset.
# 
# ie for rap YYYYJJJHHMM,  20181900000.rap.t00z.prepbufr.tm00.20180709
NC_FILE_TMPL = {init?fmt=%Y%j}{cycle?fmt=%HH}{init?fmt=%M}.rap.t{cycle?fmt=%HH}z.tm{offset?fmt=%HH}.{init?fmt=%Y%m%d}.nc

# note:
# Looks like valid? works also though I'm not sure why since it is not used in the code.
#NC_FILE_TMPL = {valid?fmt=%Y%j}{cycle?fmt=%HH}{valid?fmt=%M}.rap.t{cycle?fmt=%HH}z.tm{offset?fmt=%HH}.{valid?fmt=%Y%m%d}.nc

# =============================================================================
#
##  CONFIG section
#
[config]

PROCESS_LIST = PB2NC

## LOOP_METHOD
## Options are: processes, times
## Looping by time- runs all items in the PROCESS_LIST for each
## initialization time and repeats until all times have been evaluated.
## Looping by processes- run each item in the PROCESS_LIST for all
## specified initialization times then repeat for the next item in the
## PROCESS_LIST.
LOOP_METHOD = processes

## OVERWRITE OPTIONS
## Don't overwrite files if they already exist.
## Set to no if you do NOT want to override existing files
## Set to yes if you do want to override existing files
OVERWRITE_NC_OUTPUT = yes

# Time method by which to perform validation, either by init time or by valid
# time. Indicate by either BY_VALID or BY_INIT
# This is the YMD in the directory ... which for gsd is the init or cycle time ... so use BY_INIT
# That is, what does the PREP_BUFR_DIR (<group>) pattern represent ... the init or rather, the cycle time.
TIME_METHOD = BY_INIT

## MET Configuration files for pb2nc
PB2NC_CONFIG_FILE = {PARM_BASE}/use_cases/ensemble/met_config/PB2NCConfig_HRRR

# For processing by init time or valid time, indicate the start and end hours
# in HH format
# Hour time of first file to process
START_HOUR = 12
# Hour time of last file to process
END_HOUR = 00

# Indicate the begin and end date, and interval (in hours)
BEG_TIME = 20180709
END_TIME = 20180711
INTERVAL_TIME = 1

# start and end dates are created by combining the date with
# start and end hours (format can be hh, hhmm, or hhmmss.
START_DATE = {BEG_TIME}{START_HOUR}
END_DATE = {END_TIME}{END_HOUR}

# Either conus_sfc or upper_air
VERTICAL_LOCATION = conus_sfc

# These are appended with PB2NC to differentiate the GRID, POLY, and MESSAGE_TYPE for point_stat.
PB2NC_GRID =
PB2NC_POLY =
PB2NC_STATION_ID =
PB2NC_MESSAGE_TYPE = ADPUPA, ADPSFC, AIRCFT, PROFLR

# Leave empty to process all
OBS_BUFR_VAR_LIST = POB, QOB, TOB, ZOB, UOB, VOB, D_DPT, D_WDIR, D_WIND, D_RH, D_MIXR, D_PRMSL

#OBS_WINDOW_BEGIN = -2700
#OBS_WINDOW_END = 2700
OBS_WINDOW_BEGIN = -900
OBS_WINDOW_END = 900


#******************************************************************************
# ***NOTE***
#******************************************************************************
# I think these just need to be kept in sync with the MET PB2NC config file.
# They are used in the METplus module but they are not setting the values 
# in the MET config file.

# SET TIME_SUMMARY_FLAG to False. There is a bug in met-6.1.
## For defining the time periods for summarization
# False for no time summary, True otherwise
TIME_SUMMARY_FLAG = False
TIME_SUMMARY_BEG = 000000  ;; start time of time summary in HHMMSS format
TIME_SUMMARY_END = 235959  ;; end time of time summary in HHMMSS format
TIME_SUMMARY_VAR_NAMES = PMO,TOB,TDO,UOB,VOB,PWO,TOCC
TIME_SUMMARY_TYPES = min, max, range, mean, stdev, median, p80  ;; a list of the statistics to summarize



# BELOW THIS LINE ARE PB2NC CONF FILE NOTES: No more settings.
# =============================================================================
#

# PREEPBUFR_DATA_DIR:
# PREPBUFR_DATA_DIR/PREPBUFR_MODEL_DIR_NAME is combined and used as the
# base_search_dir, using PREPBUFR_DIR_REGEX, to search and generate a list of 
# all the YYYYMMDD subdirectories of the prebbufr data files. 
# Do NOT use symbolic links under the base_search_dir to point to directories, 
# they will not be searched.
# ie. PREPBUFR_DATA_DIR = {INPUT_BASE}/prepbufr
# ex: nam, gdas, rap
# ie. PREPBUFR_MODEL_DIR_NAME = rap

# Specifically,
# PREPBUFR_DATA_DIR/PREPBUFR_MODEL_DIR_NAME is combined to a base_search_dir 
# and a list of ALL the subdirectories under this base_search_dir is generated.
# Note: This use python's os.walk function to generate the list.
# Do not use symbolic links under base_search_dir to point to directories.
# Symbolic links that resolve to directories will not be included in the list.

# PREPBUFR_DIR_REGEX:
# This pattern is used to match and generate the list of subdirectores to search for
# prepbufr files. YOUR prepbufr files MUST reside in YYYYMMDD subdirectories and
# the pattern grouping (2[0-9]{7}) MUST exist in your pattern definition below.
# THIS pattern is meant to match PREPBUFR_DATA_DIR/PREPBUFR_MODEL_DIR_NAME/YYYYMMDD
# ie. PREPBUFR_DIR_REGEX = .*\/rap\/(2[0-9]{7}).*

# PREPBUFR_FILE_REGEXE:
# This pattern is used to match and generate a list of prepbufr files under
# each of the matched  PREPBUFR_DIR_REGEX subdirectories.
# The (pattern grouping) to have in this REGEX, but it is NOT used for
# for filename time determination.
# ie. PREPBUFR_FILE_REGEX = .*rap.t([0-9]{2})z.prepbufr.tm([0-9]{2}).*
# ie. PREPBUFR_FILE_REGEX = .*

#
# EXAMPLE of suppported GSD DIRECTORY DATA STRUCTURE
# --------------------------------------------------
#
# Example, Prepbufr INPUT files in YYYYMMDD subdirs
# {INPUT_BASE}/prepbufr/rap/20180709
# 20181900000.rap.t00z.prepbufr.tm00.20180709
# 20181900100.rap.t01z.prepbufr.tm00.20180709
# ...
# {INPUT_BASE}/prepbufr/rap/20180710
# 20181910600.rap.t06z.prepbufr.tm00.20180710
# ...
# {INPUT_BASE}/prepbufr/rap/20180711
# 20181921100.rap.t11z.prepbufr.tm00.20180711
# 
# ------
# Example, All files in single subdirectory - not supported.
# bug in pb2nc_wrapper.py
# {INPUT_BASE}/2018070912/prepbufr/obs/prepbufr
# 20181900000.rap.t00z.prepbufr.tm00.20180709
# 20181900100.rap.t01z.prepbufr.tm00.20180709
# 20181910600.rap.t06z.prepbufr.tm00.20180710
# 20181921100.rap.t11z.prepbufr.tm00.20180711


# EXAMPLE (output from pb2nc)
#  {OUTPUT_BASE}/rap/
# 20181901200.rap.t12z.tm00.20180709.nc
# 20181901300.rap.t13z.tm00.20180709.nc
# 20181901400.rap.t14z.tm00.20180709.nc
# ...
# 20181912100.rap.t21z.tm00.20180710.nc
# 20181912200.rap.t22z.tm00.20180710.nc
# 20181912300.rap.t23z.tm00.20180710.nc
# 20181920000.rap.t00z.tm00.20180711.nc


# EXAMPLE OF OTHER supported INPUT DIRECTORY/FILENAME structure
#
# .../prepbufr/
# prepbufr.gdas.2017060100
# prepbufr.gdas.2017060106
# prepbufr.gdas.2017060112
# prepbufr.gdas.2017060118
# prepbufr.gdas.2017060200
# prepbufr.gdas.2017060206
# prepbufr.gdas.2017060212
# prepbufr.gdas.2017060218
# ...
# prepbufr.gdas.2017063000
# prepbufr.gdas.2017063006
# prepbufr.gdas.2017063012
# prepbufr.gdas.2017063018

# OR
# .../nam/
# nam.20170601/nam.t00z.prepbufr.tm00
# nam.20170601/nam.t00z.prepbufr.tm03
# nam.20170601/nam.t06z.prepbufr.tm00
# nam.20170601/nam.t06z.prepbufr.tm03
# nam.20170601/nam.t12z.prepbufr.tm00
# nam.20170601/nam.t12z.prepbufr.tm03
# nam.20170601/nam.t18z.prepbufr.tm00
# nam.20170601/nam.t18z.prepbufr.tm03
# ...
# nam.20170630/nam.t00z.prepbufr.tm00
# nam.20170630/nam.t00z.prepbufr.tm03
# nam.20170630/nam.t06z.prepbufr.tm00
# nam.20170630/nam.t06z.prepbufr.tm03
# nam.20170630/nam.t12z.prepbufr.tm00
# nam.20170630/nam.t12z.prepbufr.tm03
# nam.20170630/nam.t18z.prepbufr.tm00
# nam.20170630/nam.t18z.prepbufr.tm03


